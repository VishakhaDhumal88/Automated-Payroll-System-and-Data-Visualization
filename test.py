from tkinter import *
from tkinter import ttk
import tkinter as tk
from openpyxl import load_workbook
from datetime import date
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import webbrowser
from PIL import Image, ImageTk
import os
newline = os.linesep

selected_id = None
selected_name = None
selected_ctc = None
today = None
selected_gender = None
selected_Department = None
selected_GSalary = None
selected_HRA = None
selected_Basic = None


def Features():
    print("Function 1 selected")


def Employee_Data():
    print("Function 1 selected")


def Overtime_Analysis():
    print("Function 1 selected")


def Employee_Accounts():
    print("Function 1 selected")


def Help():
    print("Function 1 selected")


def Contact():
    print("Function 1 selected")


def set_hand_cursor(event):
    event.widget.config(cursor="hand2")


def reset_cursor(event):
    event.widget.config(cursor="")


def generate_pdf(slip):
    pdf_name = "Salary Slip.pdf"
    c = canvas.Canvas(pdf_name, pagesize=letter)
    c.setFont("Helvetica", 12)

    lines = slip.split("\n")
    y = 750

    for line in lines:
        c.drawString(100, y, line)
        y -= 14

    c.save()

    # Open the PDF file
    webbrowser.open(pdf_name)


def verify_name():
    global selected_id, selected_name

    selected_id = var.get()

    if selected_id in id_name_dict:
        selected_name = id_name_dict[selected_id]
        print(f"Employee Name: {selected_name}")
    else:
        print("Invalid Employee ID")


def display_salary_slip(*args):
    global selected_id, selected_name, selected_ctc, today, selected_gender, selected_Department, selected_Designation, selected_HRA, selected_Transport, selected_Basic, selected_GSalary

    selected_id = var.get()

    if selected_id in id_name_dict:
        selected_name = id_name_dict[selected_id]
        selected_ctc = id_ctc_dict[selected_id]
        selected_gender = id_Department_dict[selected_id]
        selected_Department = id_WeeklyOff_dict[selected_id]
        selected_Designation = id_paidHolidays_dict[selected_id]
        selected_Basic = id_Basic_dict[selected_id]
        selected_HRA = id_HRA_dict[selected_id]
        selected_Transport = id_Transport_dict[selected_id]
        selected_GSalary = id_GSalary_dict[selected_id]
        today = date.today().strftime("%B %d, %Y")
    else:
        print("Invalid Employee ID")


def generate_salary_slip():
    global selected_id, selected_name, selected_ctc, today, selected_Department, selected_gender, selected_Designation, selected_HRA, selected_Transport, selected_Basic, selected_GSalary

    if selected_id is not None and selected_name is not None:
        slip = (
            "A SALARY SLIP GENERATED BY STUDENTS OF MMCOE AI&DS FOR CAREERBOOK\n"
            "     \n"
            f"Employee ID: {selected_id:>40}\n"
            "     \n"
            f"Salary Date: {today:>40}\n"
            "     \n"
            f"CTC: Rs. {selected_ctc:>39}\n"
            "     \n"
            f"Employee Name: {selected_name:>38}\n"
            "     \n"
            f"Gender: {selected_gender:>44}\n"
            "     \n"
            f"Department: {selected_Department:>40}\n"
            "     \n"
            f"Designation: {selected_Designation:>39}\n"
            "     \n"
            f"Basic: Rs. {selected_Basic:>41}\n"
            "     \n"
            f"HRA: Rs. {selected_HRA:>43}\n"
            "     \n"
            f"Transport: Rs. {selected_Transport:>37}\n"
            "     \n"
            f"Gross Salary: Rs. {selected_GSalary:>35}\n"
        )

        generate_pdf(slip)
    else:
        print("Invalid Employee ID")


def load_data_from_excel():
    global id_name_dict, id_ctc_dict, id_gender_dict, id_Department_dict, id_Designation_dict, id_Basic_dict, id_HRA_dict, id_Transport_dict, id_GSalary_dict

    workbook = load_workbook("salary.xlsx")
    worksheet = workbook.active

    column_a = worksheet["A"][1:]  # Employee ID
    column_r = worksheet["R"][1:]  # CTC
    column_g = worksheet["G"][1:]  # Gender
    column_o = worksheet["O"][1:]  # Department
    column_p = worksheet["P"][1:]  # Designation
    column_i = worksheet["I"][1:]  # Basic
    column_j = worksheet["J"][1:]  # HRA
    column_l = worksheet["L"][1:]  # Transport
    column_k = worksheet["K"][1:]  # Gross Salary

    id_name_dict = {cell.value: cell.offset(column=1).value for cell in column_a}
    id_ctc_dict = {cell.value: ctc_cell.value if isinstance(ctc_cell.value, (int, float)) else worksheet[ctc_cell.value].value for cell, ctc_cell in zip(column_a, column_r)}
    id_gender_dict = {cell.value: cell.offset(column=6).value for cell in column_a}
    id_Department_dict = {cell.value: cell.offset(column=14).value for cell in column_a}
    id_Designation_dict = {cell.value: cell.offset(column=15).value for cell in column_a}
    id_Basic_dict = {cell.value: cell.offset(column=8).value for cell in column_a}
    id_HRA_dict = {cell.value: cell.offset(column=9).value for cell in column_a}
    id_Transport_dict = {cell.value: cell.offset(column=11).value for cell in column_a}
    id_GSalary_dict = {cell.value: cell.offset(column=10).value for cell in column_a}

    # Uncomment the following lines if you want to print the dictionaries for debugging
    # print(id_name_dict)
    # print(id_ctc_dict)
    # print(id_gender_dict)
    # print(id_Department_dict)
    # print(id_Designation_dict)
    # print(id_Basic_dict)
    # print(id_HRA_dict)
    # print(id_Transport_dict)
    # print(id_GSalary_dict)


# Create a Tkinter window
root = Tk()

# Load data from Excel file
load_data_from_excel()

# Create a label and dropdown for Employee ID selection
id_label = Label(root, text="Employee ID:")
id_label.pack()
var = StringVar(root)
id_dropdown = ttk.Combobox(root, textvariable=var)
id_dropdown["values"] = list(id_name_dict.keys())
id_dropdown.pack()

# Create a button to verify the Employee ID and retrieve the Employee Name
verify_button = Button(root, text="Verify", command=verify_name)
verify_button.pack()

# Create a button to display the salary slip
display_button = Button(root, text="Display Salary Slip", command=display_salary_slip)
display_button.pack()

# Create a button to generate the salary slip as a PDF
generate_button = Button(root, text="Generate Salary Slip (PDF)", command=generate_salary_slip)
generate_button.pack()

# Run the Tkinter event loop
root.mainloop()
